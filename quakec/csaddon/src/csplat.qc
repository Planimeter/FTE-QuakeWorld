/*
This file was automatically generated by FTE QuakeWorld v1.01
This file can be regenerated by issuing the following command:
pr_dumpplatform -FFTE -Fdefines -TCS -O csplat
Available options:
-Ffte     - target only FTE (optimations and additional extensions)
-Tnq      - dump specifically NQ fields
-Tqw      - dump specifically QW fields
-Tcs      - dump specifically CSQC fields
-Fdefines - generate #defines instead of constants
-O        - write to a different qc file
*/
#pragma noref 1
#pragma target FTE
#define CSQC
entity self;
entity other;
entity world;
float time;
float cltime;
float frametime;
float player_localentnum;
float player_localnum;
float maxclients;
float clientcommandframe;
float servercommandframe;
string mapname;
float intermission;
vector v_forward, v_up, v_right;
vector view_angles;
float trace_allsolid, trace_startsolid, trace_fraction;
vector trace_endpos, trace_plane_normal;
float trace_plane_dist;
entity trace_ent;
float trace_inopen;
float trace_inwater;
float input_timelength;
vector input_angles;
vector input_movevalues;
float input_buttons;
float input_impulse;
void end_sys_globals;
.float modelindex;
.vector absmin, absmax;
.float entnum;
.float drawmask;
.void() predraw;
.float movetype;
.float solid;
.vector origin;
.vector oldorigin;
.vector velocity;
.vector angles;
.vector avelocity;
.float pmove_flags;
.string classname;
.float renderflags;
.string model;
.float frame;
.float frame1time;
.float frame2;
.float frame2time;
.float lerpfrac;
.float skin;
.float effects;
.vector mins, maxs;
.vector size;
.void() touch;
.void() think;
.void() blocked;
.float nextthink;
.entity chain;
.entity enemy;
.float flags;
.float colormap;
.entity owner;
void end_sys_fields;
.vector punchangle;
.float gravity;
.float hull;
.entity movechain;
.void() chainmoved;
.void(float old, float new) contentstransition;
.float dimension_solid;
.float dimension_hit;
.float hitcontentsmask;
.float scale;
.float fatness;
.float alpha;
.entity tag_entity;
.float skeletonindex;
.vector colormod;
.vector glowmod;
.vector gravitydir;
.float friction;
.float erp;
.float jointtype;
.float mass;
.float bouncefactor;
.float bouncestop;
.float forceshader;
.float baseframe;
.float baseframe2;
.float baseframe1time;
.float baseframe2time;
.float baselerpfrac;
.float basebone;
.float bonecontrol1;
.float bonecontrol2;
.float bonecontrol3;
.float bonecontrol4;
.float bonecontrol5;
.float subblendfrac;
.float basesubblendfrac;
.float ideal_pitch;
.float pitch_speed;
var float physics_mode = 2;
float gamespeed;
#define TRUE 1
#define FALSE 0
#define MOVETYPE_NONE 0
#define MOVETYPE_WALK 3
#define MOVETYPE_STEP 4
#define MOVETYPE_FLY 5
#define MOVETYPE_TOSS 6
#define MOVETYPE_PUSH 7
#define MOVETYPE_NOCLIP 8
#define MOVETYPE_FLYMISSILE 9
#define MOVETYPE_BOUNCE 10
#define MOVETYPE_BOUNCEMISSILE 11
#define MOVETYPE_FOLLOW 12
#define MOVETYPE_PHYSICS 32
#define SOLID_NOT 0
#define SOLID_TRIGGER 1
#define SOLID_BBOX 2
#define SOLID_SLIDEBOX 3
#define SOLID_BSP 4
#define SOLID_CORPSE 5
#define SOLID_LADDER 20
#define SOLID_PHYSICS_BOX 32
#define SOLID_PHYSICS_SPHERE 33
#define SOLID_PHYSICS_CAPSULE 34
#define JOINTTYPE_FIXED -1
#define JOINTTYPE_POINT 1
#define JOINTTYPE_HINGE 2
#define JOINTTYPE_SLIDER 3
#define JOINTTYPE_UNIVERSAL 4
#define JOINTTYPE_HINGE2 5
#define CONTENT_EMPTY -1
#define CONTENT_SOLID -2
#define CONTENT_WATER -3
#define CONTENT_SLIME -4
#define CONTENT_LAVA -5
#define CONTENT_SKY -6
#define CHAN_AUTO 0
#define CHAN_WEAPON 1
#define CHAN_VOICE 2
#define CHAN_ITEM 3
#define CHAN_BODY 4
#define ATTN_NONE 0
#define ATTN_NORM 1
#define FL_FLY 1
#define FL_SWIM 2
#define FL_CLIENT 8
#define FL_INWATER 16
#define FL_MONSTER 32
#define FL_ITEM 256
#define FL_ONGROUND 512
#define FL_PARTIALGROUND 1024
#define FL_WATERJUMP 2048
#define FL_JUMPRELEASED 4096
#define FL_FINDABLE_NONSOLID 16384
#define MOVE_NORMAL 0
#define MOVE_NOMONSTERS 1
#define MOVE_MISSILE 2
#define MOVE_HITMODEL 4
#define MOVE_TRIGGERS 16
#define MOVE_EVERYTHING 32
#define MOVE_ENTCHAIN 128
#define EF_BRIGHTFIELD 1
#define EF_MUZZLEFLASH 2
#define EF_BRIGHTLIGHT 4
#define EF_DIMLIGHT 8
#define EF_ADDITIVE 32
#define EF_BLUE 64
#define EF_RED 128
#define EF_FULLBRIGHT 512
#define EF_NODEPTHTEST 8192
#define STAT_HEALTH 0
#define STAT_WEAPON 2
#define STAT_AMMO 3
#define STAT_ARMOR 4
#define STAT_WEAPONFRAME 5
#define STAT_SHELLS 6
#define STAT_NAILS 7
#define STAT_ROCKETS 8
#define STAT_CELLS 9
#define STAT_ACTIVEWEAPON 10
#define STAT_TOTALSECRETS 11
#define STAT_TOTALMONSTERS 12
#define STAT_SECRETS 13
#define STAT_MONSTERS 14
#define STAT_ITEMS 15
#define STAT_VIEWHEIGHT 16
#define STAT_VIEW2 20
#define STAT_VIEWZOOM 21
#define VF_MIN 1
#define VF_MIN_X 2
#define VF_MIN_Y 3
#define VF_SIZE 4
#define VF_SIZE_X 5
#define VF_SIZE_Y 6
#define VF_VIEWPORT 7
#define VF_FOV 8
#define VF_FOVX 9
#define VF_ORIGIN 11
#define VF_ORIGIN_X 12
#define VF_ORIGIN_Y 13
#define VF_ORIGIN_Z 14
#define VF_ANGLES 15
#define VF_ANGLES_X 16
#define VF_ANGLES_Y 17
#define VF_ANGLES_Z 18
#define VF_DRAWWORLD 19
#define VF_DRAWENGINESBAR 20
#define VF_DRAWCROSSHAIR 21
#define VF_CL_VIEWANGLES 33
#define VF_CL_VIEWANGLES_X 34
#define VF_CL_VIEWANGLES_Y 35
#define VF_CL_VIEWANGLES_Z 36
#define VF_PERSPECTIVE 200
#define VF_LPLAYER 202
#define VF_AFOV 203
#define VF_SCREENVSIZE 204
#define VF_SCREENPSIZE 205
#define RF_VIEWMODEL 1
#define RF_EXTERNALMODEL 2
#define RF_DEPTHHACK 4
#define RF_ADDITIVE 8
#define RF_USEAXIS 16
#define RF_NOSHADOW 32
#define RF_FRAMETIMESARESTARTTIMES 64
#define RF_NOAUTOADD 128
#define IE_KEYDOWN 0
#define IE_KEYUP 1
#define IE_MOUSEDELTA 2
#define IE_MOUSEABS 3
#define IE_ACCELEROMETER 4
#define FILE_READ 0
#define FILE_APPEND 1
#define FILE_WRITE 2
#define FILE_READNL 4
#define FILE_MMAP_READ 5
#define FILE_MMAP_RW 6
#define MOVE_LAGGED 64
#define MASK_ENGINE 1
#define MASK_VIEWMODEL 2
#define LFIELD_ORIGIN 0
#define LFIELD_COLOUR 1
#define LFIELD_RADIUS 2
#define LFIELD_FLAGS 3
#define LFIELD_STYLE 4
#define LFIELD_ANGLES 5
#define LFIELD_FOV 6
#define LFIELD_CORONA 7
#define LFIELD_CORONASCALE 8
#define LFIELD_CUBEMAPNAME 9
#define LFIELD_AMBIENTSCALE 10
#define LFIELD_DIFFUSESCALE 11
#define LFIELD_SPECULARSCALE 12
#define LFLAG_NORMALMODE 1
#define LFLAG_REALTIMEMODE 2
#define LFLAG_LIGHTMAP 4
#define LFLAG_FLASHBLEND 8
#define LFLAG_NOSHADOWS 256
#define LFLAG_SHADOWMAP 512
#define LFLAG_CREPUSCULAR 1024
#define TEREDIT_RELOAD 0
#define TEREDIT_SAVE 1
#define TEREDIT_SETHOLE 2
#define TEREDIT_HEIGHT_SET 3
#define TEREDIT_HEIGHT_SMOOTH 4
#define TEREDIT_HEIGHT_SPREAD 5
#define TEREDIT_HEIGHT_RAISE 6
#define TEREDIT_HEIGHT_FLATTEN 18
#define TEREDIT_HEIGHT_LOWER 7
#define TEREDIT_TEX_KILL 8
#define TEREDIT_TEX_GET 9
#define TEREDIT_MIX_PAINT 10
#define TEREDIT_MIX_UNIFY 11
#define TEREDIT_MIX_NOISE 12
#define TEREDIT_MIX_BLUR 13
#define TEREDIT_WATER_SET 14
#define TEREDIT_MESH_ADD 15
#define TEREDIT_MESH_KILL 16
#define TEREDIT_TINT 17
void(vector vang) makevectors = #1;
void(entity e, vector o) setorigin = #2;
void(entity e, string m) setmodel = #3;
void(entity e, vector min, vector max) setsize = #4;
float() random = #7;
void(entity e, float chan, string samp, float vol, float atten, optional float speedpct, optional float flags) sound = #8;
vector(vector v) normalize = #9;
void(string e) error = #10;
void(string e) objerror = #11;
float(vector v) vlen = #12;
float(vector v) vectoyaw = #13;
entity() spawn = #14;
void(entity e) remove = #15;
void(vector v1, vector v2, float nomonsters, entity ent) traceline = #16;
entity(entity start, .string fld, string match) find = #18;
void(string s) precache_sound = #19;
void(string s) precache_model = #20;
entity(vector org, float rad) findradius = #22;
void(string s, ...) dprint = #25;
string(float val) ftos = #26;
string(vector val) vtos = #27;
void() coredump = #28;
void() traceon = #29;
void() traceoff = #30;
void(entity e) eprint = #31;
float(float yaw, float dist) walkmove = #32;
float() droptofloor = #34;
void(float lightstyle, string stylestring) lightstyle = #35;
float(float) rint = #36;
float(float) floor = #37;
float(float) ceil = #38;
//float(vector v) qtest_canreach = #39;
float(entity ent) checkbottom = #40;
float(vector pos) pointcontents = #41;
float(float) fabs = #43;
float(string) cvar = #45;
void(string, ...) localcmd = #46;
entity(entity) nextent = #47;
void(vector pos, vector dir, float colour, float count) particle = #48;
#define ChangeYaw changeyaw
void() changeyaw = #49;
vector(vector fwd, optional vector up) vectoangles = #51;
float(float angle) sin = #60; /* Part of DP_QC_SINCOSSQRTPOW*/
float(float angle) cos = #61; /* Part of DP_QC_SINCOSSQRTPOW*/
float(float value) sqrt = #62; /* Part of DP_QC_SINCOSSQRTPOW*/
void(entity ent) changepitch = #63; /* Part of DP_QC_CHANGEPITCH*/
void(entity ent, entity ignore) tracetoss = #64;
string(entity ent) etos = #65; /* Part of DP_QC_ETOS*/
void(float step) movetogoal = #67;
void(entity e) makestatic = #69;
void(string cvarname, string valuetoset) cvar_set = #72;
void (vector pos, string samp, float vol, float atten) ambientsound = #74;
void(string str) precache_model2 = #75;
void(string str) precache_sound2 = #76;
float(string) stof = #81; /* Part of FRIK_FILE, FTE_STRINGS, QW_ENGINE, ZQ_QC_STRINGS*/
void(vector start, vector mins, vector maxs, vector end, float nomonsters, entity ent) tracebox = #90; /* Part of DP_QC_TRACEBOX*/
vector() randomvec = #91; /* Part of DP_QC_RANDOMVEC*/
vector(vector org) getlight = #92;
void(string cvarname, string defaultvalue) registercvar = #93; /* Part of DP_REGISTERCVAR*/
float(float a, float b, ...) min = #94; /* Part of DP_QC_MINMAXBOUND*/
float(float a, float b, ...) max = #95; /* Part of DP_QC_MINMAXBOUND*/
float(float minimum, float val, float maximum) bound = #96; /* Part of DP_QC_MINMAXBOUND*/
float(float value, float exp) pow = #97; /* Part of DP_QC_SINCOSSQRTPOW*/
entity(entity start, .float fld, float match) findfloat = #98; /* Part of DP_QC_FINDFLOAT*/
float(string extname) checkextension = #99;
float(string filename, float mode, optional float mmapminsize) fopen = #110; /* Part of FRIK_FILE*/
void(float fhandle) fclose = #111; /* Part of FRIK_FILE*/
string(float fhandle) fgets = #112; /* Part of FRIK_FILE*/
void(float fhandle, string s, optional string s2, optional string s3, optional string s4, optional string s5, optional string s6, optional string s7) fputs = #113; /* Part of FRIK_FILE*/
float(string s) strlen = #114; /* Part of FRIK_FILE, FTE_STRINGS, ZQ_QC_STRINGS*/
string(string s1, optional string s2, ...) strcat = #115; /* Part of FRIK_FILE, FTE_STRINGS, ZQ_QC_STRINGS*/
string(string s, float start, float length) substring = #116; /* Part of FRIK_FILE, FTE_STRINGS, ZQ_QC_STRINGS*/
vector(string s) stov = #117; /* Part of FRIK_FILE, FTE_STRINGS, ZQ_QC_STRINGS*/
string(string s) strzone = #118; /* Part of FRIK_FILE, FTE_STRINGS, ZQ_QC_STRINGS*/
void(string s) strunzone = #119; /* Part of FRIK_FILE, FTE_STRINGS, ZQ_QC_STRINGS*/
float(string modelname, optional float queryonly) getmodelindex = #200;
__variant(float prnum, string funcname, ...) externcall = #201; /* Part of FTE_MULTIPROGS*/
float(string progsname) addprogs = #202; /* Part of FTE_MULTIPROGS*/
__variant(float prnum, string varname) externvalue = #203; /* Part of FTE_MULTIPROGS*/
void(float prnum, __variant newval, string varname) externset = #204; /* Part of FTE_MULTIPROGS*/
float(string input, string token) instr = #206; /* Part of FTE_MULTIPROGS*/
void(float portal, float state) openportal = #207;
void(optional __variant ret) abort = #211; /* Part of FTE_MULTITHREADED*/
void(vector org, vector dmin, vector dmax, float colour, float effect, float count) particle2 = #215; /* Part of FTE_HEXEN2*/
void(vector org, vector box, float colour, float effect, float count) particle3 = #216; /* Part of FTE_HEXEN2*/
void(vector org, float radius, float colour, float effect, float count) particle4 = #217; /* Part of FTE_HEXEN2*/
float(float number, float quantity) bitshift = #218; /* Part of EXT_BITSHIFT*/
void(vector pos) te_lightningblood = #219; /* Part of FTE_TE_STANDARDEFFECTBUILTINS*/
float(string s1, string sub, optional float startidx) strstrofs = #221; /* Part of FTE_STRINGS*/
float(string str, float index) str2chr = #222; /* Part of FTE_STRINGS*/
string(float chr, ...) chr2str = #223; /* Part of FTE_STRINGS*/
string(float ccase, float redalpha, float redchars, string str, ...) strconv = #224; /* Part of FTE_STRINGS*/
string(float pad, string str1, ...) strpad = #225; /* Part of FTE_STRINGS*/
string(string old, string key, string value) infoadd = #226; /* Part of FTE_STRINGS*/
string(string info, string key) infoget = #227; /* Part of FTE_STRINGS*/
float(string s1, string s2, float len) strncmp = #228; /* Part of FTE_STRINGS*/
float(string s1, string s2) strcasecmp = #229; /* Part of FTE_STRINGS*/
float(string s1, string s2, float len) strncasecmp = #230; /* Part of FTE_STRINGS*/
void() calltimeofday = #231; /* Part of FTE_CALLTIMEOFDAY*/
void(vector angle) rotatevectorsbyangle = #235;
void(vector fwd, vector right, vector up) rotatevectorsbyvectors = #236;
float(float mdlindex, string skinname) skinforname = #237;
#ifdef CSQC
float(string shadername, optional string defaultshader, ...) shaderforname = #238;
#endif
void(vector org, optional float count) te_bloodqw = #239; /* Part of FTE_TE_STANDARDEFFECTBUILTINS*/
#ifdef CSQC
vector(entity ent, float tagnum) rotatevectorsbytag = #244;
#endif
int(string) stoi = #259; /* Part of FTE_QC_INTCONV*/
string(int) itos = #260; /* Part of FTE_QC_INTCONV*/
int(string) stoh = #261; /* Part of FTE_QC_INTCONV*/
string(int) htos = #262; /* Part of FTE_QC_INTCONV*/
float(float modlindex, optional float useabstransforms) skel_create = #263;
float(float skel, entity ent, float modelindex, float retainfrac, float firstbone, float lastbone, optional float addfrac) skel_build = #264;
float(float skel) skel_get_numbones = #265;
string(float skel, float bonenum) skel_get_bonename = #266;
float(float skel, float bonenum) skel_get_boneparent = #267;
float(float skel, string tagname) skel_find_bone = #268;
vector(float skel, float bonenum) skel_get_bonerel = #269;
vector(float skel, float bonenum) skel_get_boneabs = #270;
void(float skel, float bonenum, vector org, optional vector fwd, optional vector right, optional vector up) skel_set_bone = #271;
void(float skel, float bonenum, vector org, optional vector fwd, optional vector right, optional vector up) skel_mul_bone = #272;
void(float skel, float startbone, float endbone, vector org, optional vector fwd, optional vector right, optional vector up) skel_mul_bones = #273;
void(float skeldst, float skelsrc, float startbone, float entbone) skel_copybones = #274;
void(float skel) skel_delete = #275;
float(float modidx, string framename) frameforname = #276;
float(float modidx, float framenum) frameduration = #277;
void(float action, vector pos, float radius, float quant) terrain_edit = #278;
void() touchtriggers = #279;
float(entity skelent, string dollname, float parentskel) skel_ragupdate = #281;
float*(float skel) skel_mmap = #282;
void(entity ent, float bonenum, vector org, optional vector angorfwd, optional vector right, optional vector up) skel_set_bone_world = #283;
string(float modidx, float framenum) frametoname = #284;
string(float modidx, float skin) skintoname = #285;
#ifdef CSQC
void() clearscene = #300;
void(float mask) addentities = #301;
void(entity ent) addentity = #302;
#define setviewprop setproperty
float(float property, ...) setproperty = #303;
void() renderscene = #304;
float(vector org, float radius, vector lightcolours) dynamiclight_add = #305;
void(string texturename, optional float flags) R_BeginPolygon = #306;
void(vector org, vector texcoords, vector rgb, float alpha) R_PolygonVertex = #307;
void() R_EndPolygon = #308;
#define getviewprop getproperty
__variant(float property) getproperty = #309;
vector (vector v) unproject = #310;
vector (vector v) project = #311;
void(float width, vector pos1, vector pos2) drawline = #315;
float(string name) iscachedpic = #316;
string(string name, float trywad) precache_pic = #317;
vector(string picname) draw_getimagesize = #318;
void(string name) freepic = #319;
float(vector position, float character, vector scale, vector rgb, float alpha, optional float flag) drawcharacter = #320;
float(vector position, string text, vector scale, vector rgb, float alpha, optional float flag) drawrawstring = #321;
float(vector position, string pic, vector size, vector rgb, float alpha, optional float flag) drawpic = #322;
float(vector position, vector size, vector rgb, float alpha, optional float flag) drawfill = #323;
void(float x, float y, float width, float height) drawsetcliparea = #324;
void(void) drawresetcliparea = #325;
float(vector position, string text, vector scale, vector rgb, float alpha, float flag) drawstring = #326;
float(string text, float usecolours, optional vector fontsize) stringwidth = #327;
void(vector pos, vector sz, string pic, vector srcpos, vector srcsz, vector rgb, float alpha, float flag) drawsubpic = #328;
float(float stnum) getstati = #330;
#define getstatf getstatbits
float(float stnum, optional float firstbit, optional float bitcount) getstatbits = #331;
string(float firststnum) getstats = #332;
void(entity e, float mdlindex) setmodelindex = #333;
string(float mdlindex) modelnameforindex = #334;
#endif
float(string effectname) particleeffectnum = #335;
void(float effectnum, entity ent, vector start, vector end) trailparticles = #336;
void(float effectnum, vector origin, optional vector dir, optional float count) pointparticles = #337;
#ifdef CSQC
void(string s, ...) cprint = #338;
#endif
void(string s, ...) print = #339;
#ifdef CSQC
string(float keynum) keynumtostring = #340;
float(string keyname) stringtokeynum = #341;
string(float keynum) getkeybind = #342;
vector() getmousepos = #344;
float(float framenum) getinputstate = #345;
void(float sens) setsensitivityscaler = #346;
#endif
void(entity ent) runstandardplayerphysics = #347;
#ifdef CSQC
string(float playernum, string keyname) getplayerkeyvalue = #348;
float() isdemo = #349;
float() isserver = #350;
void(vector origin, vector forward, vector right, vector up) SetListener = #351;
void(string cmdname) registercommand = #352;
#endif
float(entity ent) wasfreed = #353;
#ifdef CSQC
string(string key) serverkey = #354;
string() getentitytoken = #355;
void(string evname, string evargs, ...) sendevent = #359;
float() readbyte = #360;
float() readchar = #361;
float() readshort = #362;
float() readlong = #363;
float() readcoord = #364;
float() readangle = #365;
string() readstring = #366;
float() readfloat = #367;
float() readentitynum = #368;
float(string modelname, float(float isnew) updatecallback, float flags) deltalisten = #371;
__variant(float lno, float fld) dynamiclight_get = #372;
void(float lno, float fld, __variant value) dynamiclight_set = #373;
string(float efnum, float body) particleeffectquery = #374;
#endif
void*(int size) memalloc = #384; /* Part of FTE_MEMALLOC*/
void(void *ptr) memfree = #385; /* Part of FTE_MEMALLOC*/
void(void *dst, void *src, int size) memcpy = #386; /* Part of FTE_MEMALLOC*/
void(void *dst, int val, int size) memset = #387; /* Part of FTE_MEMALLOC*/
void(entity from, entity to) copyentity = #400; /* Part of DP_QC_COPYENTITY*/
entity(.string field, string match) findchain = #402; /* Part of DP_QC_FINDCHAIN*/
entity(.float fld, float match) findchainfloat = #403; /* Part of DP_QC_FINDCHAINFLOAT*/
void(vector org, string modelname, float startframe, float endframe, float framerate) effect = #404; /* Part of DP_SV_EFFECT*/
void(vector org, vector dir, float count) te_blood = #405; /* Part of DP_TE_BLOOD*/
void(vector mincorner, vector maxcorner, float explosionspeed, float howmany) te_bloodshower = #406; /* Part of DP_TE_BLOODSHOWER*/
void(vector org, vector color) te_explosionrgb = #407; /* Part of DP_TE_EXPLOSIONRGB*/
void(vector mincorner, vector maxcorner, vector vel, float howmany, float color, float gravityflag, float randomveljitter) te_particlecube = #408; /* Part of DP_TE_PARTICLECUBE*/
void(vector mincorner, vector maxcorner, vector vel, float howmany, float color) te_particlerain = #409; /* Part of _DP_TE_PARTICLERAIN*/
void(vector mincorner, vector maxcorner, vector vel, float howmany, float color) te_particlesnow = #410; /* Part of _DP_TE_PARTICLESNOW*/
void(vector org, vector vel, float howmany) te_spark = #411; /* Part of DP_TE_SPARK*/
void(vector org) te_gunshotquad = #412; /* Part of _DP_TE_QUADEFFECTS1*/
void(vector org) te_spikequad = #413; /* Part of _DP_TE_QUADEFFECTS1*/
void(vector org) te_superspikequad = #414; /* Part of _DP_TE_QUADEFFECTS1*/
void(vector org) te_explosionquad = #415; /* Part of _DP_TE_QUADEFFECTS1*/
void(vector org) te_smallflash = #416; /* Part of DP_TE_SMALLFLASH*/
void(vector org, float radius, float lifetime, vector color) te_customflash = #417; /* Part of _DP_TE_CUSTOMFLASH*/
void(vector org, optional float count) te_gunshot = #418; /* Part of DP_TE_STANDARDEFFECTBUILTINS, FTE_TE_STANDARDEFFECTBUILTINS*/
void(vector org) te_spike = #419; /* Part of DP_TE_STANDARDEFFECTBUILTINS, FTE_TE_STANDARDEFFECTBUILTINS*/
void(vector org) te_superspike = #420; /* Part of DP_TE_STANDARDEFFECTBUILTINS, FTE_TE_STANDARDEFFECTBUILTINS*/
void(vector org) te_explosion = #421; /* Part of DP_TE_STANDARDEFFECTBUILTINS, FTE_TE_STANDARDEFFECTBUILTINS*/
void(vector org) te_tarexplosion = #422; /* Part of DP_TE_STANDARDEFFECTBUILTINS, FTE_TE_STANDARDEFFECTBUILTINS*/
void(vector org) te_wizspike = #423; /* Part of DP_TE_STANDARDEFFECTBUILTINS, FTE_TE_STANDARDEFFECTBUILTINS*/
void(vector org) te_knightspike = #424; /* Part of DP_TE_STANDARDEFFECTBUILTINS, FTE_TE_STANDARDEFFECTBUILTINS*/
void(vector org) te_lavasplash = #425; /* Part of DP_TE_STANDARDEFFECTBUILTINS, FTE_TE_STANDARDEFFECTBUILTINS*/
void(vector org) te_teleport = #426; /* Part of DP_TE_STANDARDEFFECTBUILTINS, FTE_TE_STANDARDEFFECTBUILTINS*/
void(vector org, float color, float colorlength) te_explosion2 = #427; /* Part of DP_TE_STANDARDEFFECTBUILTINS*/
void(entity own, vector start, vector end) te_lightning1 = #428; /* Part of DP_TE_STANDARDEFFECTBUILTINS, FTE_TE_STANDARDEFFECTBUILTINS*/
void(entity own, vector start, vector end) te_lightning2 = #429; /* Part of DP_TE_STANDARDEFFECTBUILTINS, FTE_TE_STANDARDEFFECTBUILTINS*/
void(entity own, vector start, vector end) te_lightning3 = #430; /* Part of DP_TE_STANDARDEFFECTBUILTINS, FTE_TE_STANDARDEFFECTBUILTINS*/
void(entity own, vector start, vector end) te_beam = #431; /* Part of DP_TE_STANDARDEFFECTBUILTINS*/
void(vector dir) vectorvectors = #432; /* Part of DP_QC_VECTORVECTORS*/
void(vector org) te_plasmaburn = #433; /* Part of _DP_TE_PLASMABURN*/
float(entity e, float s) getsurfacenumpoints = #434; /* Part of DP_QC_GETSURFACE*/
vector(entity e, float s, float n) getsurfacepoint = #435; /* Part of DP_QC_GETSURFACE*/
vector(entity e, float s) getsurfacenormal = #436; /* Part of DP_QC_GETSURFACE*/
string(entity e, float s) getsurfacetexture = #437; /* Part of DP_QC_GETSURFACE*/
float(entity e, vector p) getsurfacenearpoint = #438; /* Part of DP_QC_GETSURFACE*/
float(string s) tokenize = #441; /* Part of KRIMZON_SV_PARSECLIENTCOMMAND*/
string(float n) argv = #442; /* Part of KRIMZON_SV_PARSECLIENTCOMMAND*/
float(string pattern, float caseinsensitive, float quiet) search_begin = #444; /* Part of DP_QC_FS_SEARCH*/
void(float handle) search_end = #445; /* Part of DP_QC_FS_SEARCH*/
float(float handle) search_getsize = #446; /* Part of DP_QC_FS_SEARCH*/
string(float handle, float num) search_getfilename = #447; /* Part of DP_QC_FS_SEARCH*/
string(string cvarname) cvar_string = #448; /* Part of DP_QC_CVAR_STRING*/
entity(entity start, .float fld, float match) findflags = #449; /* Part of DP_QC_FINDFLAGS*/
entity(.float fld, float match) findchainflags = #450; /* Part of DP_QC_FINDCHAINFLAGS*/
float(entity ent, string tagname) gettagindex = #451; /* Part of DP_MD3_TAGSINFO*/
vector(entity ent, float tagindex) gettaginfo = #452; /* Part of DP_MD3_TAGSINFO*/
entity(float entnum) edict_num = #459; /* Part of DP_QC_EDICT_NUM*/
float() buf_create = #460; /* Part of DP_QC_STRINGBUFFERS*/
void(float bufhandle) buf_del = #461; /* Part of DP_QC_STRINGBUFFERS*/
float(float bufhandle) buf_getsize = #462; /* Part of DP_QC_STRINGBUFFERS*/
void(float bufhandle_from, float bufhandle_to) buf_copy = #463; /* Part of DP_QC_STRINGBUFFERS*/
void(float bufhandle, float sortpower, float backward) buf_sort = #464; /* Part of DP_QC_STRINGBUFFERS*/
string(float bufhandle, string glue) buf_implode = #465; /* Part of DP_QC_STRINGBUFFERS*/
string(float bufhandle, float string_index) bufstr_get = #466; /* Part of DP_QC_STRINGBUFFERS*/
void(float bufhandle, float string_index, string str) bufstr_set = #467; /* Part of DP_QC_STRINGBUFFERS*/
float(float bufhandle, string str, float order) bufstr_add = #468; /* Part of DP_QC_STRINGBUFFERS*/
void(float bufhandle, float string_index) bufstr_free = #469; /* Part of DP_QC_STRINGBUFFERS*/
float(float s) asin = #471; /* Part of DP_QC_ASINACOSATANATAN2TAN*/
float(float c) acos = #472; /* Part of DP_QC_ASINACOSATANATAN2TAN*/
float(float t) atan = #473; /* Part of DP_QC_ASINACOSATANATAN2TAN*/
float(float c, float s) atan2 = #474; /* Part of DP_QC_ASINACOSATANATAN2TAN*/
float(float a) tan = #475; /* Part of DP_QC_ASINACOSATANATAN2TAN*/
float(string s) strlennocol = #476; /* Part of DP_QC_STRINGCOLORFUNCTIONS*/
string(string s) strdecolorize = #477; /* Part of DP_QC_STRINGCOLORFUNCTIONS*/
string(float uselocaltime, string format, ...) strftime = #478; /* Part of DP_QC_STRFTIME*/
float(string s, string separator1, ...) tokenizebyseparator = #479; /* Part of DP_QC_TOKENIZEBYSEPARATOR*/
string(string s) strtolower = #480; /* Part of DP_QC_STRING_CASE_FUNCTIONS*/
string(string s) strtoupper = #481; /* Part of DP_QC_STRING_CASE_FUNCTIONS*/
string(string s) cvar_defstring = #482; /* Part of DP_QC_CVAR_DEFSTRING*/
#ifdef CSQC
void(vector origin, string sample, float volume, float attenuation) pointsound = #483; /* Part of DP_SV_POINTSOUND*/
#endif
string(string search, string replace, string subject) strreplace = #484; /* Part of DP_QC_STRREPLACE*/
string(string search, string replace, string subject) strireplace = #485; /* Part of DP_QC_STRREPLACE*/
vector(entity e, float s, float n, float a) getsurfacepointattribute = #486; /* Part of DP_QC_GETSURFACEPOINTATTRIBUTE*/
#ifdef CSQC
float(string name) gecko_create = #487; /* Part of DP_GECKO_SUPPORT*/
void(string name) gecko_destroy = #488; /* Part of DP_GECKO_SUPPORT*/
void(string name, string URI) gecko_navigate = #489; /* Part of DP_GECKO_SUPPORT*/
float(string name, float key, float eventtype) gecko_keyevent = #490; /* Part of DP_GECKO_SUPPORT*/
void(string name, float x, float y) gecko_mousemove = #491; /* Part of DP_GECKO_SUPPORT*/
void(string name, float w, float h) gecko_resize = #492; /* Part of DP_GECKO_SUPPORT*/
vector(string name) gecko_get_texture_extent = #493; /* Part of DP_GECKO_SUPPORT*/
#endif
float(float caseinsensitive, string s, ...) crc16 = #494; /* Part of DP_QC_CRC16*/
float(string name) cvar_type = #495; /* Part of DP_QC_CVAR_TYPE*/
float() numentityfields = #496; /* Part of DP_QC_ENTITYDATA*/
string(float fieldnum) entityfieldname = #497; /* Part of DP_QC_ENTITYDATA*/
float(float fieldnum) entityfieldtype = #498; /* Part of DP_QC_ENTITYDATA*/
string(float fieldnum, entity ent) getentityfieldstring = #499; /* Part of DP_QC_ENTITYDATA*/
float(float fieldnum, entity ent, string s) putentityfieldstring = #500; /* Part of DP_QC_ENTITYDATA*/
//void(float to, string s, float sz) WritePicture = #501; /* Part of DP_SV_WRITEPICTURE*/
//string() ReadPicture = #501;
string(string filename) whichpack = #503; /* Part of DP_QC_WHICHPACK*/
#ifdef CSQC
__variant(float entnum, float fieldnum) getentity = #504;
#endif
string(string in) uri_escape = #510; /* Part of DP_QC_URI_ESCAPE*/
string(string in) uri_unescape = #511; /* Part of DP_QC_URI_ESCAPE*/
float(entity ent) num_for_edict = #512;
float(string str) tokenize_console = #514;
float(float idx) argv_start_index = #515;
float(float idx) argv_end_index = #516;
string(string cvarname) cvar_description = #518;
#ifdef CSQC
float(optional float timetype) gettime = #519;
#endif
void(string s) loadfromdata = #529;
void(string s) loadfromfile = #530;
void(.../*, string funcname*/) callfunction = #605;
void(float fh, entity e) writetofile = #606;
float(string s) isfunction = #607;
void(entity e, string s) parseentitydata = #608;
string(string fmt, ...) sprintf = #627;
float(entity e, float s) getsurfacenumtriangles = #628;
vector(entity e, float s, float n) getsurfacetriangle = #629;
#pragma noref 0
